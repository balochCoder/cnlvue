<?php

namespace App\Http\Requests\Api\V1;

use App\Enums\ApplicantDesired;
use App\Enums\CourseLevel;
use App\Models\Course;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Storage;
use Illuminate\Validation\Rule;

class UpdateCourseRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return [
            'representing_institution_id' => ['required', Rule::exists('representing_institutions', 'id')],
            'title' => ['required', Rule::unique('courses', 'title')->ignore($this->course->id)],
            'level' => ['required', Rule::enum(CourseLevel::class)],
            'duration' => ['required', 'array', 'required_array_keys:year,month,weeks'],
            'start_date' => ['nullable', 'date'],
            'end_date' => ['nullable', 'date'],
            'campus' => ['required', 'string'],
            'awarding_body' => ['nullable', 'string'],
            'fee' => ['required', 'numeric'],
            'application_fee' => ['nullable', 'numeric'],
            'currency_id' => ['required', 'integer', Rule::exists('currencies', 'id')],
            'monthly_living_cost' => ['numeric', 'nullable'],
            'part_time_work_details' => ['nullable', 'string'],
            'course_benefits' => ['nullable', 'string'],
            'general_eligibility' => ['nullable', 'string'],
            'quality_of_applicant' => ['nullable', Rule::enum(ApplicantDesired::class)],
            'is_language' => ['nullable', 'boolean'],
            'language_requirements' => ['required_if:is_language,true'],
            'additional_information' => ['nullable', 'string'],
            'course_category' => ['nullable', 'array'],
            'document_1_title' => ['nullable', 'string'],
            'document_1' => ['nullable', 'file'],
            'document_2_title' => ['nullable', 'string'],
            'document_2' => ['nullable', 'file'],
            'document_3_title' => ['nullable', 'string'],
            'document_3' => ['nullable', 'file'],
            'document_4_title' => ['nullable', 'string'],
            'document_4' => ['nullable', 'file'],
            'document_5_title' => ['nullable', 'string'],
            'document_5' => ['nullable', 'file'],
            'modules' => ['nullable', 'array'],
            'intake' => ['required', 'array'],
        ];
    }

    public function messages(): array
    {
        return [
            'currency_id.required' => 'Currency is required.',
            'language_requirements.required_if' => 'Language requirements field is required if Language mandatory',
        ]; // TODO: Change the autogenerated stub
    }

    public function getData()
    {
        $data = $this->validated();

        $data['duration'] = json_encode($this->duration);
        if ($this->course_category) {
            $data['course_category'] = json_encode($this->course_category);
        }

        if ($this->modules) {
            $data['modules'] = json_encode($this->modules);
        }
        if ($this->intake) {
            $data['intake'] = json_encode($this->intake);
        }

        if ($this->hasFile('document_1')) {
            $directory = Course::makeDirectory('document_1');
            $data['document_1'] = Storage::url('/') . $this->document_1->store($directory);
        }
        if ($this->hasFile('document_2')) {
            $directory = Course::makeDirectory('document_2');
            $data['document_2'] = Storage::url('/') . $this->document_2->store($directory);
        }
        if ($this->hasFile('document_3')) {
            $directory = Course::makeDirectory('document_3');
            $data['document_3'] = Storage::url('/') . $this->document_2->store($directory);
        }
        if ($this->hasFile('document_4')) {
            $directory = Course::makeDirectory('document_4');
            $data['document_4'] = Storage::url('/') . $this->document_2->store($directory);
        }
        if ($this->hasFile('document_5')) {
            $directory = Course::makeDirectory('document_5');
            $data['document_5'] = Storage::url('/') . $this->document_2->store($directory);
        }


        return $data;
    }
}
